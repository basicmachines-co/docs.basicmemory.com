---
import '@/styles/global.css'

export interface Props {
  title: string
  description?: string
}

const { title = 'Basic Memory', description = 'Basic Memory - Persistent memory for Claude AI' } = Astro.props
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{!title || title === 'Basic Memory' ? 'Basic Memory' : `${title} - Basic Memory`}</title>

    <!-- Theme initialization script - prevents flash of light mode -->
    <script is:inline>
      (function() {
        // Get theme from localStorage with fallback to system preference
        const savedTheme = localStorage.getItem('basic-memory-theme') || 'system';
        const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        const initialTheme = savedTheme === 'system' ? systemTheme : savedTheme;

        // Apply theme immediately to prevent flashing
        document.documentElement.className = initialTheme;
      })();
    </script>
  </head>
  <body>
    <slot />

    <script>
      // Preserve sidebar scroll position
      document.addEventListener('click', (e) => {
        const sidebar = document.getElementById('sidebar-nav');
        if (sidebar && e.target.closest('a')) {
          sessionStorage.setItem('sidebarScrollPos', sidebar.scrollTop);
        }
      });

      // Restore scroll position after navigation
      document.addEventListener('DOMContentLoaded', () => {
        const sidebar = document.getElementById('sidebar-nav');
        const scrollPos = sessionStorage.getItem('sidebarScrollPos');
        if (sidebar && scrollPos) {
          sidebar.scrollTop = parseInt(scrollPos);
        }
      });

      // Handle accordion interactions
      document.addEventListener('DOMContentLoaded', () => {
        document.addEventListener('click', (e) => {
          const trigger = (e.target as HTMLElement).closest('.accordion-trigger')
          if (!trigger) return

          const content = trigger.nextElementSibling as HTMLElement
          const icon = trigger.querySelector('.accordion-icon')
          const isOpen = trigger.getAttribute('data-state') === 'open'

          trigger.setAttribute('data-state', isOpen ? 'closed' : 'open')
          content.classList.toggle('hidden')
          icon?.classList.toggle('rotate-180')
        })

        // Code tabs functionality
        const codeTabs = document.querySelectorAll('.code-tabs')

        codeTabs.forEach(tabContainer => {
          const buttons = tabContainer.querySelectorAll('.tab-button')
          const contents = tabContainer.querySelectorAll('.tab-content')

          buttons.forEach((button, index) => {
            button.addEventListener('click', () => {
              // Update button states
              buttons.forEach((btn, btnIndex) => {
                if (btnIndex === index) {
                  btn.classList.add('border-b-2', 'border-primary', 'bg-white', 'dark:bg-gray-900', 'text-gray-900', 'dark:text-gray-100')
                  btn.classList.remove('text-gray-600', 'dark:text-gray-400')
                } else {
                  btn.classList.remove('border-b-2', 'border-primary', 'bg-white', 'dark:bg-gray-900', 'text-gray-900', 'dark:text-gray-100')
                  btn.classList.add('text-gray-600', 'dark:text-gray-400')
                }
              })

              // Update content visibility
              contents.forEach((content, contentIndex) => {
                if (contentIndex === index) {
                  content.classList.remove('hidden')
                  content.classList.add('block')
                } else {
                  content.classList.add('hidden')
                  content.classList.remove('block')
                }
              })
            })
          })
        })

        // Add copy buttons to code blocks
        const codeBlocks = document.querySelectorAll('pre')
        codeBlocks.forEach(pre => {
          // Skip if already wrapped
          if (pre.parentElement?.classList.contains('code-block-wrapper')) return

          // Create wrapper
          const wrapper = document.createElement('div')
          wrapper.className = 'code-block-wrapper relative'

          // Create copy button
          const button = document.createElement('button')
          button.className = 'copy-button'
          button.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect width="14" height="14" x="8" y="8" rx="2" ry="2"/>
              <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/>
            </svg>
          `
          button.setAttribute('aria-label', 'Copy code')

          // Wrap the pre element
          pre.parentNode?.insertBefore(wrapper, pre)
          wrapper.appendChild(pre)
          wrapper.appendChild(button)

          // Handle copy
          button.addEventListener('click', async () => {
            const code = pre.querySelector('code')
            const text = code?.textContent || ''

            try {
              await navigator.clipboard.writeText(text)
              button.classList.add('copied')
              button.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <polyline points="20 6 9 17 4 12"/>
                </svg>
              `

              setTimeout(() => {
                button.classList.remove('copied')
                button.innerHTML = `
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect width="14" height="14" x="8" y="8" rx="2" ry="2"/>
                    <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/>
                  </svg>
                `
              }, 2000)
            } catch (err) {
              console.error('Failed to copy:', err)
            }
          })
        })
      })

      // Full screen image viewer
      const createImageViewer = () => {
        // Create viewer element
        const viewer = document.createElement('div')
        viewer.className = 'image-viewer'
        viewer.innerHTML = `
          <img src="" alt="" />
          <div class="image-viewer-close">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </div>
        `
        document.body.appendChild(viewer)

        const viewerImg = viewer.querySelector('img')
        const closeBtn = viewer.querySelector('.image-viewer-close')

        // Close on click outside image or close button
        viewer.addEventListener('click', (e) => {
          if (e.target === viewer || e.target === closeBtn || closeBtn.contains(e.target)) {
            viewer.classList.remove('active')
          }
        })

        // Close on escape key
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && viewer.classList.contains('active')) {
            viewer.classList.remove('active')
          }
        })

        return { viewer, viewerImg }
      }

      // Initialize image viewer
      const { viewer, viewerImg } = createImageViewer()

      // Add click handlers to all images
      const images = document.querySelectorAll('article img')
      images.forEach(img => {
        img.addEventListener('click', () => {
          viewerImg.src = img.src
          viewerImg.alt = img.alt || ''
          viewer.classList.add('active')
        })
      })
    </script>
  </body>
</html>
