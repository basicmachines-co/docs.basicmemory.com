---
import '@/styles/global.css'

export interface Props {
  title: string
  description?: string
}

const { title, description = 'Basic Memory - Persistent memory for Claude AI' } = Astro.props
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>Basic Memory - {title}</title>
  </head>
  <body>
    <slot />
    
    <script>
      // Handle accordion interactions
      document.addEventListener('DOMContentLoaded', () => {
        document.addEventListener('click', (e) => {
          const trigger = (e.target as HTMLElement).closest('.accordion-trigger')
          if (!trigger) return
          
          const content = trigger.nextElementSibling as HTMLElement
          const icon = trigger.querySelector('.accordion-icon')
          const isOpen = trigger.getAttribute('data-state') === 'open'
          
          trigger.setAttribute('data-state', isOpen ? 'closed' : 'open')
          content.classList.toggle('hidden')
          icon?.classList.toggle('rotate-180')
        })
        
        // Add copy buttons to code blocks
        const codeBlocks = document.querySelectorAll('pre')
        codeBlocks.forEach(pre => {
          // Skip if already wrapped
          if (pre.parentElement?.classList.contains('code-block-wrapper')) return
          
          // Create wrapper
          const wrapper = document.createElement('div')
          wrapper.className = 'code-block-wrapper relative'
          
          // Create copy button
          const button = document.createElement('button')
          button.className = 'copy-button'
          button.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect width="14" height="14" x="8" y="8" rx="2" ry="2"/>
              <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/>
            </svg>
          `
          button.setAttribute('aria-label', 'Copy code')
          
          // Wrap the pre element
          pre.parentNode?.insertBefore(wrapper, pre)
          wrapper.appendChild(pre)
          wrapper.appendChild(button)
          
          // Handle copy
          button.addEventListener('click', async () => {
            const code = pre.querySelector('code')
            const text = code?.textContent || ''
            
            try {
              await navigator.clipboard.writeText(text)
              button.classList.add('copied')
              button.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <polyline points="20 6 9 17 4 12"/>
                </svg>
              `
              
              setTimeout(() => {
                button.classList.remove('copied')
                button.innerHTML = `
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect width="14" height="14" x="8" y="8" rx="2" ry="2"/>
                    <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/>
                  </svg>
                `
              }, 2000)
            } catch (err) {
              console.error('Failed to copy:', err)
            }
          })
        })
      })
    </script>
  </body>
</html>